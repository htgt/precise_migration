package HTGT::Utils::Report::AlternateCloneRecoveryCounts;

# $HeadURL: svn+ssh://svn.internal.sanger.ac.uk/repos/svn/htgt/projects/htgt/trunk/lib/HTGT/Utils/Report/AlternateCloneRecoveryCounts.pm $
# $LastChangedRevision: 791 $
# $LastChangedDate: 2010-01-18 12:02:38 +0000 (Mon, 18 Jan 2010) $
# $LastChangedBy: rm7 $

use strict;
use warnings FATAL => 'all';

use base 'Exporter';

BEGIN {
    our @EXPORT      = qw( get_alternate_clone_recovery_counts );
    our @EXPORT_OK   = @EXPORT;
    our %EXPORT_TAGS = ();
}

use Carp 'confess';
use IO::File;
use File::Spec;
use Text::CSV_XS;
use Readonly;

Readonly my $DATA_DIR => '/software/team87/brave_new_world/data/generated/recovery_reports';

Readonly my %FILENAME_FOR => (
    'in_recovery'      => 'alternate_clone_recovery_in_recovery.csv',
    'no_alternates'    => 'alternate_clone_recovery_no_alternates.csv',
    'with_promoter'    => 'alternate_clone_recovery_promoter.csv',
    'without_promoter' => 'alternate_clone_recovery_promoterless.csv'
);

sub get_alternate_clone_recovery_counts {
    my ( $c, $key ) = @_;

    my $count = eval { _get_alternate_clone_recovery_counts( $DATA_DIR, $key ) };

    if ( $@ ) {
        $c->log->error( $@ );
        return 'ERROR';
    }

    return $count;
}   

sub _get_alternate_clone_recovery_counts {
    my ( $data_dir, $key ) = @_;

    my $filename = $FILENAME_FOR{ $key }
        or confess( "invalid key: $key" );

    my $path = File::Spec->catfile( $data_dir, $filename );

    my $ifh = IO::File->new( $path, O_RDONLY )
        or confess( "open $path: $!" );

    my $csv = Text::CSV_XS->new();

    $csv->column_names( $csv->getline( $ifh ) );

    my %seen;

    while ( my $row = $csv->getline_hr( $ifh ) ) {
        if ( defined $row->{marker_symbol} ) {
            $seen{ $row->{marker_symbol} }++;
        }
    }

    return scalar keys %seen;
}

1;

__END__

=pod

=head1 NAME

HTGT::Utils::Report::AlternateCloneRecoveryCounts

=head1 SYNOPSIS

  use HTGT::Utils::Report::AlternateCloneRecoveryCounts;
  my $count = get_alternate_clone_recovery_counts( $c, 'in_recovery' );

=head1 DESCRIPTION

This module provides a helper function to count the number of distinct
genes in each of the alternate clone recovery reports. The raw data is
generated by an external cron job, and saved as CSV files in
C</software/team87/brave_new_world/data/generated/recovery_reports>.

=head1 EXPORTED FUNCTIONS

This module exports a single function into the caller's namespace.

=over 4

=item C<get_alternate_clone_recovery_counts( $c, $key )>

Returns the number of distinct genes in the report identified by
C<$key>, which should be one of C<with_promoter>, C<without_promoter>,
C<in_recovery>, or C<no_alternates>. C<$c> should be the Catalyst
context, and is used for logging.

On error, a stack trace is logged and the string C<ERROR> returned.

=back

=head1 AUTHOR

Ray Miller E<lt>rm7@sanger.ac.ukE<gt>

=cut
