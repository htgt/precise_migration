.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Graphics::Glyph::decorated_transcript 3"
.TH Bio::Graphics::Glyph::decorated_transcript 3 "2013-07-25" "perl v5.14.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Graphics::Glyph::decorated_transcript \- draws processed transcript with protein decorations
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  See L<Bio::Graphics::Panel> and L<Bio::Graphics::Glyph>.
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This glyph extends the functionality of the Bio::Graphics::Glyph::processed_transcript glyph 
and allows to draw protein decorations (e.g., signal peptides, transmembrane domains, protein domains)
on top of gene models. Currently, the glyph can draw decorations in form of colored or outlined boxes 
inside or around \s-1CDS\s0 segments. Protein decorations are specified at the 'mRNA' transcript level 
in protein coordinates. Protein coordinates are automatically mapped to nucleotide coordinates by the glyph. 
Decorations are allowed to span exon-exon junctions, in which case decorations are split between exons. 
By default, the glyph automatically assigns different colors to different types of protein decorations, whereas 
decorations of the same type are always assigned the same color.
.PP
Protein decorations are provided either with mRNA features inside \s-1GFF\s0 files (see example below) or 
dynamically via callback function using the \fBadditional_decorations\fR option (see glyph options).
The following line is an example of an mRNA feature in a \s-1GFF\s0 file that contains two protein decorations, 
one signal peptide predicted by SignalP and one transmembrane domain predicted by \s-1TMHMM:\s0
.PP
\&\f(CW\*(C`chr1   my_source   mRNA  74796  75599   .  +  .  ID=rna_gene\-1;protein_decorations=SignalP40:SP:1:23:0:my_comment,TMHMM:TM:187:209:0\*(C'\fR
.PP
Each protein decoration consists of six fields separated by a colon:
.IP "1. type" 4
.IX Item "1. type"
Decoration type.  For example used to specify decoration source (e.g. 'SignalP40')
.IP "2. name" 4
.IX Item "2. name"
Decoration name. Used as decoration label by default (e.g. '\s-1SP\s0' for signal peptide)
.IP "3. start" 4
.IX Item "3. start"
Start coordinate at the protein-level (1\-based coordinate)
.IP "4. end" 4
.IX Item "4. end"
End coordinate at the protein-level
.IP "5. score" 4
.IX Item "5. score"
Optional. Score associated with a decoration (e.g. Pfam E\-value). This score can be used 
to dynamically filter or color decorations via callbacks (see glyph options).
.IP "6. description" 4
.IX Item "6. description"
Optional. User-defined description of decoration. The glyph ignores this description, 
but it will be made available to callback functions for inspection. Special characters 
like ':' or ',' that might interfere with the \s-1GFF\s0 tag parser should be avoided.
.PP
If callback functions are used as glyph parameters (see below), the callback is called for each
decoration separately. That is, the callback can be called multiple times for a given \s-1CDS\s0 feature,
but each time with a different decoration that overlaps with this \s-1CDS.\s0 The currently drawn (active) 
decoration is made available to the callback via the glyph method 'active_decoration'. The active 
decoration is returned in form of a Bio::Graphics::Feature object, with decoration data fields 
mapped to corresponding feature attributes in the following way:
.IP "\(bu" 4
type \-\-> \f(CW$glyph\fR\->active_decoration\->type
.IP "\(bu" 4
name \-\-> \f(CW$glyph\fR\->active_decoration\->name
.IP "\(bu" 4
nucleotide start coordinate \-\-> \f(CW$glyph\fR\->active_decoration\->start
.IP "\(bu" 4
nucleotide end coordinate \-\-> \f(CW$glyph\fR\->active_decoration\->end
.IP "\(bu" 4
protein start coordinate \-\-> \f(CW$glyph\fR\->active_decoration\->get_tag_values('p_start')
.IP "\(bu" 4
protein end coordinate \-\-> \f(CW$glyph\fR\->active_decoration\->get_tag_values('p_end')
.IP "\(bu" 4
score \-\-> \f(CW$glyph\fR\->active_decoration\->score
.IP "\(bu" 4
description \-\-> \f(CW$glyph\fR\->active_decoration\->description
.PP
In addition, the glyph passed to the callback allows access to the parent glyph and
parent feature if required (use \f(CW$glyph\fR\->parent or \f(CW$glyph\fR\->parent\->feature).
.SS "\s-1OPTIONS\s0"
.IX Subsection "OPTIONS"
This glyph inherits all options from the Bio::Graphics::Glyph::processed_transcript glyph. 
In addition, it recognizes the following glyph-specific options:
.PP
.Vb 2
\&  Option          Description                                              Default
\&  \-\-\-\-\-\-          \-\-\-\-\-\-\-\-\-\-\-                                              \-\-\-\-\-\-\-
\&
\&  \-decoration_visible       
\&  
\&                  Specifies whether decorations should be visible          false
\&                  or not. For selective display of individual 
\&                  decorations, specify a callback function and 
\&                  return 1 or 0 after inspecting the active decoration
\&                  of the glyph. 
\&
\&  \-decoration_color
\&  
\&                  Decoration background color. If no color is              <auto>
\&                  specified, colors are assigned automatically by
\&                  decoration type and name, whereas decorations of 
\&                  identical type and name are assigned the same color.
\&                  A special color \*(Aqtransparent\*(Aq can be used here in 
\&                  combination with the option \*(Aqdecoration_border\*(Aq to 
\&                  draw decorations as outlines.
\&                            
\&  \-decoration_border
\&  
\&                  Decoration border style. By default, decorations are     0 (none)
\&                  drawn without border (\*(Aqnone\*(Aq or 0). Other valid 
\&                  options here include \*(Aqsolid\*(Aq or \*(Aqdashed\*(Aq.
\&                            
\&  \-decoration_border_color
\&  
\&                  Color of decoration border.                              black 
\&                            
\&  \-decoration_label
\&
\&                  Decoration label. If not specified, the second data      true
\&                  field of the decoration is used as label. Set this       (decoration name)
\&                  option to 0 to get unlabeled decorations. If the label 
\&                  text extends beyond the size of the decorated segment, 
\&                  the label will be clipped. Clipping does not occur 
\&                  for SVG output.
\&
\&  \-decoration_label_position
\&  
\&                  Position of decoration label. Labels can be drawn        inside 
\&                  \*(Aqinside\*(Aq decorations (default) or \*(Aqabove\*(Aq and \*(Aqbelow\*(Aq
\&                  decorations.
\&                  
\&  \-decoration_label_color
\&  
\&                  Decoration label color. If not specified, this color 
\&                  is complementary to decoration_color (e.g., yellow text 
\&                  on blue background, white on black, etc.). If the 
\&                  decoration background color is transparent and no
\&                  decoration label color is specified, the foreground color 
\&                  of the underlying transcript glyph is used as default.
\&
\&  \-additional_decorations
\&   
\&                  Additional decorations to those specified in the GFF     undefined 
\&                  file. Expected is a string in the same format as 
\&                  described above for GFF files. 
\&                  This parameter is intended to be used as callback 
\&                  function, which inspects the currently processed
\&                  transcript feature (first parameter to callback) 
\&                  and returns additional protein decorations that 
\&                  should be drawn.
\&
\&  \-decoration_height
\&                  
\&                  Decoration height. Unless specified otherwise,           CDS height\-2
\&                  the height of the decoration is the height of the 
\&                  underlying transcript glyph minus 2, such that 
\&                  the decoration is drawn within transcript boundaries.
\&
\&  \-decoration_position       
\&  
\&                  Currently decorations can only be drawn inside           inside 
\&                  CDS segments.
\&                            
\&  \-flip_minus
\&  
\&                  If set to 1, features on the negative strand will be     false 
\&                  drawn flipped. This is not particularly useful in 
\&                  GBrowse, but becomes handy if multiple features should 
\&                  be drawn within the same panel, left\-aligned, and on 
\&                  top of each other, for example to allow for easy gene 
\&                  structure comparisons.
.Ve
.SH "BUGS"
.IX Header "BUGS"
Strandedness arrows are decorated incorrectly. Currently, the glyph plots a rectangular box 
over the arrow instead of properly coloring the arrow.
.PP
Overlapping decorations are drawn on top of each other without particular order. The only 
solution to this problem at this point is to reduce decorations to a non-overlapping
set.
.PP
For \s-1SVG\s0 output or if drawn not inside decorations, decoration labels are not clipped.
Similar as for overlapping decorations, this can result in labels being drawn on top 
of each other.
.PP
Please report all errors.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Bio::Graphics::Panel,
Bio::Graphics::Glyph,
Bio::Graphics::Glyph::decorated_gene,
Bio::Graphics::Glyph::processed_transcript
.SH "AUTHOR"
.IX Header "AUTHOR"
Christian Frech <cfa24@sfu.ca>
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.  See \s-1DISCLAIMER\s0.txt for
disclaimers of warranty.
