.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Catalyst::ActionRole::HTTPMethods 3"
.TH Catalyst::ActionRole::HTTPMethods 3 "2013-03-18" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Catalyst::ActionRole::HTTPMethods \- Match on HTTP Methods
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    package MyApp::Web::Controller::MyController;
\&
\&    use Moose;
\&    use MooseX::MethodAttributes;
\&
\&    extends \*(AqCatalyst::Controller\*(Aq;
\&
\&    sub user_base : Chained(\*(Aq/\*(Aq) CaptureArg(0) { ... }
\&
\&      sub get_user    : Chained(\*(Aquser_base\*(Aq) Args(1) GET { ... }
\&      sub post_user   : Chained(\*(Aquser_base\*(Aq) Args(1) POST { ... }
\&      sub put_user    : Chained(\*(Aquser_base\*(Aq) Args(1) PUT { ... }
\&      sub delete_user : Chained(\*(Aquser_base\*(Aq) Args(1) DELETE { ... }
\&      sub head_user   : Chained(\*(Aquser_base\*(Aq) Args(1) HEAD { ... }
\&      sub option_user : Chained(\*(Aquser_base\*(Aq) Args(1) OPTION { ... }
\&      sub option_user : Chained(\*(Aquser_base\*(Aq) Args(1) PATCH { ... }
\&
\&
\&      sub post_and_put : Chained(\*(Aquser_base\*(Aq) POST PUT Args(1) { ... }
\&      sub method_attr  : Chained(\*(Aquser_base\*(Aq) Method(\*(AqDELETE\*(Aq) Args(0) { ... }
\&
\&    _\|_PACKAGE_\|_\->meta\->make_immutable;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is an action role that lets your Catalyst::Action match on standard
\&\s-1HTTP\s0 methods, such as \s-1GET\s0, \s-1POST\s0, etc.
.PP
Since most web browsers have limited support for rich \s-1HTTP\s0 Method vocabularies
we also support setting the expected match method via the follow non standard
but widely used http extensions.  Our support for these should not be taken as
an endorsement of the technique.   Rt is merely a reflection of our desire to
work well with existing systems and common client side tools.
.IP "X\-HTTP-Method (Microsoft)" 4
.IX Item "X-HTTP-Method (Microsoft)"
.PD 0
.IP "X\-HTTP-Method-Override (Google/GData)" 4
.IX Item "X-HTTP-Method-Override (Google/GData)"
.IP "X\-METHOD-OVERRIDE (\s-1IBM\s0)" 4
.IX Item "X-METHOD-OVERRIDE (IBM)"
.IP "x\-tunneled-method (used in many other similar systems on \s-1CPAN\s0" 4
.IX Item "x-tunneled-method (used in many other similar systems on CPAN"
.PD
.PP
Please note the insanity of overriding a \s-1GET\s0 request with a \s-1DELETE\s0 override...
Rational practices suggest that using \s-1POST\s0 with overrides to emulate \s-1PUT\s0 and
\&\s-1DELETE\s0 can be an acceptable way to deal with client limitations and security
rules on your proxy server. I recommend going no further.
.SH "REQUIRES"
.IX Header "REQUIRES"
This role requires the following methods in the consuming class.
.SS "match"
.IX Subsection "match"
.SS "match_captures"
.IX Subsection "match_captures"
Returns 1 if the action matches the existing request and zero if not.
.SH "METHODS"
.IX Header "METHODS"
This role defines the following methods
.SS "match"
.IX Subsection "match"
.SS "match_captures"
.IX Subsection "match_captures"
Around method modifier that return 1 if the request method matches one of the
allowed methods (see \*(L"http_methods\*(R") and zero otherwise.
.SS "allowed_http_methods"
.IX Subsection "allowed_http_methods"
An array of strings that are the allowed http methods for matching this action
normalized as noted above (using X\-Method* overrides).
.SS "list_extra_info"
.IX Subsection "list_extra_info"
Adds a key => [@values] \*(L"\s-1HTTP_METHODS\s0\*(R" whose value is an ArrayRef of sorted
allowed methods to the \->list_extra_info HashRef.  This is used primarily for
debugging output.
.SS "_has_expected_http_method ($expected)"
.IX Subsection "_has_expected_http_method ($expected)"
Private method which returns 1 if \f(CW$expected\fR matches one of the allowed
in \*(L"http_methods\*(R" and zero otherwise.
.SH "AUTHORS"
.IX Header "AUTHORS"
Catalyst Contributors, see Catalyst.pm
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This library is free software. You can redistribute it and/or modify it under
the same terms as Perl itself.
