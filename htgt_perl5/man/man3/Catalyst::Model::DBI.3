.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Catalyst::Model::DBI 3"
.TH Catalyst::Model::DBI 3 "2013-05-04" "perl v5.14.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Catalyst::Model::DBI \- DBI Model Class
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  # use the helper to create a model for example
\&  perl script/myapp_create.pl model MyModel DBI dsn username password
\&
\&  # lib/MyApp/Model/DBI.pm
\&  package MyApp::Model::DBI;
\&
\&  use base \*(AqCatalyst::Model::DBI\*(Aq;
\&
\&  _\|_PACKAGE_\|_\->config(
\&    dsn           => \*(AqDBI:Pg:dbname=mydb;host=localhost\*(Aq,
\&    username      => \*(Aqpgsql\*(Aq,
\&    password      => \*(Aq\*(Aq,
\&    options       => { AutoCommit => 1 },
\&    loglevel      => 1
\&  );
\&
\&  1;
\&
\&  # or load settings from a config file via Config::General for example
\&  # in your myapp.conf you could have
\&
\&  name MyApp
\&
\&  <Model::MyModel>
\&    dsn "DBI:Pg:dbname=mydb;host=localhost"
\&    username pgsql
\&    password ""
\&    <options>
\&      AutoCommit 1
\&    </options>
\&    loglevel 1
\&  </Model>
\&
\&  # note that config settings always override Model settings
\&
\&  # do something with $dbh inside a controller ...
\&  my $dbh = $c\->model(\*(AqMyModel\*(Aq)\->dbh;
\&
\&  # do something with $dbh inside a model ...
\&  my $dbh = $self\->dbh;
\&
\&  #do something with DBIx::Connector connection inside a controller ...
\&  my $connection = $c\->model(\*(AqMyModel\*(Aq)\->connection;
\&
\&  #do something with DBIx::Connector connection inside a model ...
\&  my $connection = $self\->connection;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is the \f(CW\*(C`DBI\*(C'\fR model class. It has been rewritten to use DBIx::Connector since it's internal code
that deals with connection maintenance has already been ported into there. You now have two options for 
doing custom models with Catalyst. Either by using this model and any related modules as needed
or by having your custom model decoupled from Catalyst and glued on using Catalyst::Model::Adaptor
.PP
Some general rules are as follows. If you do not wish to use DBIx::Connector directly or \s-1DBI\s0 and setup 
connections in your custom models or have glue models, then use this model. If you however need models that 
can be re-used outside of your application or simply wish to maintain connection code yourself outside of
the Catalyst, then use Catalyst::Model::Adaptor which allows you to glue outside models into your Catalyst app.
.SH "METHODS"
.IX Header "METHODS"
.IP "new" 4
.IX Item "new"
Initializes \s-1DBI\s0 connection
.ie n .IP "$self\->connection" 4
.el .IP "\f(CW$self\fR\->connection" 4
.IX Item "$self->connection"
Returns the current DBIx::Connector connection handle.
.ie n .IP "$self\->dbh" 4
.el .IP "\f(CW$self\fR\->dbh" 4
.IX Item "$self->dbh"
Returns the current database handle.
.ie n .IP "$self\->connect" 4
.el .IP "\f(CW$self\fR\->connect" 4
.IX Item "$self->connect"
Connects to the database and returns the handle.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Catalyst, \s-1DBI\s0, Catalyst::Model::Proxy, Catalyst::Model::DBI::SQL::Library
.SH "AUTHOR"
.IX Header "AUTHOR"
Alex Pavlovic, \f(CW\*(C`alex.pavlovic@taskforce\-1.com\*(C'\fR
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2005 \- 2012
the Catalyst::Model::DBI \*(L"\s-1AUTHOR\*(R"\s0
as listed above.
.SH "LICENSE"
.IX Header "LICENSE"
This program is free software, you can redistribute it and/or modify it
under the same terms as Perl itself.
