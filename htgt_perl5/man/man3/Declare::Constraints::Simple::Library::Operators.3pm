.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Declare::Constraints::Simple::Library::Operators 3"
.TH Declare::Constraints::Simple::Library::Operators 3 "2006-09-14" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Declare::Constraints::Simple::Library::Operators \- Operators
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  # all hast to be valid
\&  my $and_constraint = And( IsInt,
\&                            Matches(qr/0$/) );
\&
\&  # at least one has to be valid
\&  my $or_constraint = Or( IsInt, HasLength );
\&
\&  # only one can be valid
\&  my $xor_constraint = XOr( IsClass, IsObject );
\&
\&  # reverse validity
\&  my $not_an_integer = Not( IsInt );
\&
\&  # case valid, validate \*(Aqbar\*(Aq key depending on \*(Aqfoo\*(Aq keys value
\&  my $struct_prof = 
\&    And( IsHashRef,
\&         CaseValid( OnHashKeys(foo => IsEq("FooArray")),
\&                      OnHashKeys(bar => IsArrayRef),
\&                    OnHashKeys(foo => IsEq("FooHash")),
\&                      OnHashKeys(bar => IsHashRef) ));
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module contains the frameworks operators. These constraint like
elements act on the validity of passed constraints.
.SH "OPERATORS"
.IX Header "OPERATORS"
.SS "And(@constraints)"
.IX Subsection "And(@constraints)"
Is true if all passed \f(CW@constraints\fR are true on the value. Returns
the result of the first failing constraint.
.SS "Or(@constraints)"
.IX Subsection "Or(@constraints)"
Is true if at least one of the passed \f(CW@contraints\fR is true. Returns the
last failing constraint's result if false.
.SS "XOr(@constraints)"
.IX Subsection "XOr(@constraints)"
Valid only if a single one of the passed \f(CW@constraints\fR is valid. Returns
the last failing constraint's result if false.
.SS "Not($constraint)"
.IX Subsection "Not($constraint)"
This is valid if the passed \f(CW$constraint\fR is false. The main purpose
of this operator is to allow the easy reversion of a constraint's 
trueness.
.ie n .SS "CaseValid($test, $conseq, $test2, $conseq2, ...)"
.el .SS "CaseValid($test, \f(CW$conseq\fP, \f(CW$test2\fP, \f(CW$conseq2\fP, ...)"
.IX Subsection "CaseValid($test, $conseq, $test2, $conseq2, ...)"
This runs every given \f(CW$test\fR argument on the value, until it finds
one that returns true. If none is found, false is returned. On a true
result, howver, the corresponding \f(CW$conseq\fR constraint is applied to
the value and it's result returned. This allows validation depending
on other properties of the value:
.PP
.Vb 6
\&  my $flexible = CaseValid( IsArrayRef,
\&                              And( HasArraySize(1,5), 
\&                                   OnArrayElements(0 => IsInt) ),
\&                            IsHashRef,
\&                              And( HasHashElements(qw( head tail )),
\&                                   OnHashKeys(head => IsInt) ));
.Ve
.PP
Of course, you could model most of it probably with the other
operators, but this is a bit more readable. For default cases use
\&\f(CW\*(C`ReturnTrue\*(C'\fR from Declare::Constraints::Simple::Library::General
as test.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Declare::Constraints::Simple, Declare::Constraints::Simple::Library
.SH "AUTHOR"
.IX Header "AUTHOR"
Robert 'phaylon' Sedlacek \f(CW\*(C`<phaylon@dunkelheit.at>\*(C'\fR
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
This module is free software, you can redistribute it and/or modify it 
under the same terms as perl itself.
