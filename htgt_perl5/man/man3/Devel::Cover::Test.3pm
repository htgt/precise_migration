.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Devel::Cover::Test 3"
.TH Devel::Cover::Test 3 "2013-06-01" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Devel::Cover::Test \- Internal module for testing
.SH "VERSION"
.IX Header "VERSION"
version 1.04
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
.Vb 1
\&  my $test = Devel::Cover::Test\->new($test, criteria => $string)
.Ve
.PP
Constructor.
.PP
\&\*(L"criteria\*(R" parameter (optional, defaults to \*(L"statement branch condition
subroutine\*(R") is a space separated list of tokens.
Supported tokens are \*(L"statement\*(R", \*(L"branch\*(R", \*(L"condition\*(R", \*(L"subroutine\*(R" and
\&\*(L"pod\*(R".
.PP
More optional parameters are supported. Refer to \*(L"get_params\*(R" sub.
.SS "shell_quote"
.IX Subsection "shell_quote"
.Vb 1
\&  my $quoted_item = shell_quote($item)
.Ve
.PP
Returns properly quoted item to cope with embedded spaces.
.SS "perl"
.IX Subsection "perl"
.Vb 1
\&  my $perl = $self\->perl()
.Ve
.PP
Returns absolute path to Perl interpreter with proper \-I options (blib-wise).
.SS "test_command"
.IX Subsection "test_command"
.Vb 1
\&  my $command = $self\->test_command()
.Ve
.PP
Returns test command, made of:
.IP "absolute path to Perl interpreter" 4
.IX Item "absolute path to Perl interpreter"
.PD 0
.IP "Devel::Cover \-M option (if applicable)" 4
.IX Item "Devel::Cover -M option (if applicable)"
.IP "test file" 4
.IX Item "test file"
.IP "test file parameters (if applicable)" 4
.IX Item "test file parameters (if applicable)"
.PD
.SS "cover_command"
.IX Subsection "cover_command"
.Vb 1
\&  my $command = $self\->cover_command()
.Ve
.PP
Returns test command, made of:
.IP "absolute path to Perl interpreter" 4
.IX Item "absolute path to Perl interpreter"
.PD 0
.IP "absolute path to cover script" 4
.IX Item "absolute path to cover script"
.IP "cover parameters" 4
.IX Item "cover parameters"
.PD
.SS "test_file"
.IX Subsection "test_file"
.Vb 1
\&  my $file = $self\->test_file()
.Ve
.PP
Returns absolute path to test file.
.SS "test_file_parameters"
.IX Subsection "test_file_parameters"
.Vb 1
\&  my $parameters = $self\->test_file_parameters()
.Ve
.PP
Accessor to test_file_parameters property.
.SS "cover_gold"
.IX Subsection "cover_gold"
.Vb 1
\&  my ($base, $v) = $self\->cover_gold;
.Ve
.PP
Returns the absolute path of the base to the golden file and the suffix
version number.
.PP
\&\f(CW$base\fR comes from the name of the test and \f(CW$v\fR will be $] from the earliest perl
version for which the golden results should be the same as for the current $]
.SS "run_command"
.IX Subsection "run_command"
.Vb 1
\&  $self\->run_command($command)
.Ve
.PP
Runs command, most likely obtained from \*(L"test_command\*(R" sub.
.SH "BUGS"
.IX Header "BUGS"
Huh?
.SH "LICENCE"
.IX Header "LICENCE"
Copyright 2001\-2013, Paul Johnson (paul@pjcj.net)
.PP
This software is free.  It is licensed under the same terms as Perl itself.
.PP
The latest version of this software should be available from my homepage:
http://www.pjcj.net
