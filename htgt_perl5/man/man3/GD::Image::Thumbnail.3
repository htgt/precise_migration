.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Thumbnail 3"
.TH Thumbnail 3 "2005-08-27" "perl v5.14.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
GD::Image::Thumbnail \- Perl extension for creating thumbnailed images with GD.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use GD::Image::Thumbnail;
\& 
\&    my $img = GD::Image\->new(100,20);
\&
\&    my $thm = $img\->thumbnail; # same as { factor => 0.20 }
\&    my $thm = $img\->thumbnail($n); # same as { side => $n }
\&
\&    my $thm = $img\->thumbnail({ factor => 0.25 });
\&    my $thm = $img\->thumbnail({ factor => 0.25, small => 1 });
\&
\&    my $thm = $img\->thumbnail({ side => $n });
\&    my $thm = $img\->thumbnail({ side => $n, small => 1 });
\&
\&    my $thm = $img\->thumbnail({ w => $w });
\&    my $thm = $img\->thumbnail({ h => $h });
\&    my $thm = $img\->thumbnail({ w => $w, h => $h });
\&
\&    my $thm = $img\->thumbnail({ w => $w, small => 1 });
\&    my $thm = $img\->thumbnail({ h => $h, small => 1 });
\&    my $thm = $img\->thumbnail({ w => $w, h => $h, small => 1 });
.Ve
.SH "\fIthumb()\fP"
.IX Header "thumb()"
\&\fIthumb()\fR is shortcut for \fIthumbnail()\fR \- useful for people who like to bite their nails :)
.PP
.Vb 1
\&    $img\->thumbnail(@thm_args)
.Ve
.PP
and
.PP
.Vb 1
\&    $img\->thumb(@thm_args);
.Ve
.PP
are doing the same thing
.SH "OPTIONS"
.IX Header "OPTIONS"
.ie n .SS "factor => $n"
.el .SS "factor => \f(CW$n\fP"
.IX Subsection "factor => $n"
This makes a thumbnail \f(CW$n\fR (0.20 by default) times the size of the original. Only a two decimal place number between 0 and 1 are allowed.
If a factor is given side, h, and w are all ignored
.ie n .SS "side => $n"
.el .SS "side => \f(CW$n\fP"
.IX Subsection "side => $n"
Makes the side that will result in a larger thumbnail \f(CW$n\fR pixels (or opposite if small => 1).
If side is given then h and w are ignored.
.ie n .SS "w => $x and h => $y"
.el .SS "w => \f(CW$x\fP and h => \f(CW$y\fP"
.IX Subsection "w => $x and h => $y"
You can specify one or both of these. If only one is given it makes that side that dimention.
If you specify both, the side that will result in a larger thumbnail (based on the image's 
orientation and *not* the values of w and h if different), is used (or opposite if small => 1).
.SS "small => 1"
.IX Subsection "small => 1"
If true make the images the smallest possible. This will round down instead of up when rounding 
is necessary and will help decide which side gets set to the given value.
.PP
.Vb 2
\&   $img\->thumbnail(10); # 100 x 25 image becomes 40 x 10
\&   $img\->thumbnail({ side => 10, small => 1}); # 100 x 25 image becomes 10 x 2
.Ve
.SS "resample => 1"
.IX Subsection "resample => 1"
If true use \fIcopyResampled()\fR instead of \fIcopyResized()\fR See \s-1GD\s0's documentation about the difference.
This can also be turned on by specifying a true value as the second argument:
.PP
.Vb 2
\&   $img\->thumbnail($n, 1);
\&   $img\->thumbnail({ factor => $n }, 1);
.Ve
.SS "\s-1RETURN VALUES\s0"
.IX Subsection "RETURN VALUES"
If called in scalar context it return the new GD::Image object that is the thumbnail (\s-1IE\s0 the original object is not modified)
.PP
.Vb 1
\&    my $thm = $img\->thumb;
.Ve
.PP
If called in array context it returns an array which is the new object, the width , and height of the new image in that object.
.PP
.Vb 1
\&    my($thm,$thm_w,$thm_h) = $img\->thumb;
.Ve
.SH "TO DO"
.IX Header "TO DO"
I'd like to add functionality to modify the original image object if called in void context:
.PP
.Vb 1
\&   $img\->thumbnail(@thm_args);
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\s-1GD\s0
.SH "AUTHOR"
.IX Header "AUTHOR"
Daniel Muey, <http://drmuey.com/cpan_contact.pl>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2005 by Daniel Muey
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
