.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Hash::MoreUtils 3"
.TH Hash::MoreUtils 3 "2013-07-25" "perl v5.14.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Hash::MoreUtils \- Provide the stuff missing in Hash::Util
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  use Hash::MoreUtils qw(slice slice_def slice_exists slice_grep
\&                         hashsort
\&                        );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Similar to \f(CW\*(C`List::MoreUtils\*(C'\fR, \f(CW\*(C`Hash::MoreUtils\*(C'\fR
contains trivial but commonly-used functionality for hashes.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.ie n .SS """slice"" HASHREF[, \s-1LIST\s0]"
.el .SS "\f(CWslice\fP HASHREF[, \s-1LIST\s0]"
.IX Subsection "slice HASHREF[, LIST]"
Returns a hash containing the (key, value) pair for every
key in \s-1LIST.\s0
.ie n .SS """slice_def"" HASHREF[, \s-1LIST\s0]"
.el .SS "\f(CWslice_def\fP HASHREF[, \s-1LIST\s0]"
.IX Subsection "slice_def HASHREF[, LIST]"
As \f(CW\*(C`slice\*(C'\fR, but only includes keys whose values are
defined.
.ie n .SS """slice_exists"" HASHREF[, \s-1LIST\s0]"
.el .SS "\f(CWslice_exists\fP HASHREF[, \s-1LIST\s0]"
.IX Subsection "slice_exists HASHREF[, LIST]"
As \f(CW\*(C`slice\*(C'\fR but only includes keys which exist in the
hashref.
.ie n .SS """slice_grep"" \s-1BLOCK,\s0 HASHREF[, \s-1LIST\s0]"
.el .SS "\f(CWslice_grep\fP \s-1BLOCK,\s0 HASHREF[, \s-1LIST\s0]"
.IX Subsection "slice_grep BLOCK, HASHREF[, LIST]"
As \f(CW\*(C`slice\*(C'\fR, with an arbitrary condition.
.PP
Unlike \f(CW\*(C`grep\*(C'\fR, the condition is not given aliases to
elements of anything.  Instead, \f(CW%_\fR is set to the
contents of the hashref, to avoid accidentally
auto-vivifying when checking keys or values.  Also,
\&'uninitialized' warnings are turned off in the enclosing
scope.
.ie n .SS """hashsort"" [\s-1BLOCK,\s0] \s-1HASHREF\s0"
.el .SS "\f(CWhashsort\fP [\s-1BLOCK,\s0] \s-1HASHREF\s0"
.IX Subsection "hashsort [BLOCK,] HASHREF"
.Vb 2
\&  my @array_of_pairs  = hashsort \e%hash;
\&  my @pairs_by_length = hashsort sub { length($a) <=> length($b) }, \e%hash;
.Ve
.PP
Returns the (key, value) pairs of the hash, sorted by some
property of the keys.  By default (if no sort block given), sorts the
keys with \f(CW\*(C`cmp\*(C'\fR.
.PP
I'm not convinced this is useful yet.  If you can think of
some way it could be more so, please let me know.
.ie n .SS """safe_reverse"" [\s-1BLOCK,\s0] \s-1HASHREF\s0"
.el .SS "\f(CWsafe_reverse\fP [\s-1BLOCK,\s0] \s-1HASHREF\s0"
.IX Subsection "safe_reverse [BLOCK,] HASHREF"
.Vb 1
\&  my %dup_rev = safe_reverse \e%hash
\&
\&  sub croak_dup {
\&      my ($k, $v, $r) = @_;
\&      exists( $r\->{$v} ) and
\&        croak "Cannot safe reverse: $v would be mapped to both $k and $r\->{$v}";
\&      $v;
\&  };
\&  my %easy_rev = save_reverse \e&croak_dup, \e%hash
.Ve
.PP
Returns safely reversed hash (value, key pairs of original hash). If no
\&\f(CW\*(C`BLOCK\*(C'\fR is given, following routine will be used:
.PP
.Vb 6
\&  sub merge_dup {
\&      my ($k, $v, $r) = @_;
\&      return exists( $r\->{$v} )
\&             ? ( ref($r\->{$v}) ? [ @{$r\->{$v}}, $k ] : [ $r\->{$v}, $k ] )
\&             : $k;
\&  };
.Ve
.PP
The \f(CW\*(C`BLOCK\*(C'\fR will be called with 3 arguments:
.ie n .IP """key""" 8
.el .IP "\f(CWkey\fR" 8
.IX Item "key"
The key from the \f(CW\*(C`( key, value )\*(C'\fR pair in the original hash
.ie n .IP """value""" 8
.el .IP "\f(CWvalue\fR" 8
.IX Item "value"
The value from the \f(CW\*(C`( key, value )\*(C'\fR pair in the original hash
.ie n .IP """ref\-hash""" 8
.el .IP "\f(CWref\-hash\fR" 8
.IX Item "ref-hash"
Reference to the reversed hash (read-only)
.PP
The \f(CW\*(C`BLOCK\*(C'\fR is expected to return the value which will used
for the resulting hash.
.SH "AUTHOR"
.IX Header "AUTHOR"
Hans Dieter Pearcey, \f(CW\*(C`<hdp@cpan.org>\*(C'\fR
Jens Rehsack, \f(CW\*(C`<rehsack@cpan.org>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to
\&\f(CW\*(C`bug\-hash\-moreutils@rt.cpan.org\*(C'\fR, or through the web interface at
<http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Hash\-MoreUtils>.
I will be notified, and then you'll automatically be notified of progress on
your bug as I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc Hash::MoreUtils
.Ve
.PP
You can also look for information at:
.IP "\(bu" 4
\&\s-1RT: CPAN\s0's request tracker
.Sp
<http://rt.cpan.org/NoAuth/Bugs.html?Dist=Hash\-MoreUtils>
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
<http://annocpan.org/dist/Hash\-MoreUtils>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
<http://cpanratings.perl.org/d/Hash\-MoreUtils>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
<http://search.cpan.org/dist/Hash\-MoreUtils/>
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright 2005 Hans Dieter Pearcey, all rights reserved.
Copyright 2010 Jens Rehsack
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of either: the \s-1GNU\s0 General Public License as published
by the Free Software Foundation; or the Artistic License.
.PP
See http://dev.perl.org/licenses/ for more information.
