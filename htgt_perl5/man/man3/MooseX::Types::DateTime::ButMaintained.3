.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MooseX::Types::DateTime::ButMaintained 3"
.TH MooseX::Types::DateTime::ButMaintained 3 "2012-07-20" "perl v5.14.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MooseX::Types::DateTime::ButMaintained \- DateTime related constraints and coercions for Moose
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Export Example:
.PP
.Vb 8
\&        use MooseX::Types::DateTime::ButMaintained qw(TimeZone);
\&        has time_zone => (
\&                        isa  => TimeZone
\&                        , is => "rw"
\&                        , coerce => 1
\&        );
\&        Class\->new( time_zone => "Africa/Timbuktu" );
\&        Class\->new( time_zone => "CEST" );
.Ve
.PP
Namespaced Example:
.PP
.Vb 7
\&        use MooseX::Types::DateTime::ButMaintained;
\&        has time_zone => (
\&                isa  => \*(AqDateTime::TimeZone\*(Aq
\&                , is => "rw"
\&                , coerce => 1
\&        );
\&        Class\->new( time_zone => "Africa/Timbuktu" );
.Ve
.SH "CONSTRAINTS"
.IX Header "CONSTRAINTS"
.IP "DateTime" 4
.IX Item "DateTime"
A class type for DateTime.
.RS 4
.ie n .IP "from ""Num""" 4
.el .IP "from \f(CWNum\fR" 4
.IX Item "from Num"
Uses \*(L"from_epoch\*(R" in DateTime. Floating values will be used for subsecond percision, see DateTime for details.
.ie n .IP "from ""HashRef""" 4
.el .IP "from \f(CWHashRef\fR" 4
.IX Item "from HashRef"
Calls \*(L"new\*(R" in DateTime with the hash entries as arguments.
.RE
.RS 4
.RE
.IP "Duration" 4
.IX Item "Duration"
A class type for DateTime::Duration
.RS 4
.ie n .IP "from ""Num""" 4
.el .IP "from \f(CWNum\fR" 4
.IX Item "from Num"
Uses \*(L"new\*(R" in DateTime::Duration and passes the number as the \f(CW\*(C`seconds\*(C'\fR argument.
.Sp
Note that due to leap seconds, \s-1DST\s0 changes etc this may not do what you expect.  For instance passing in \f(CW86400\fR is not always equivalent to one day, although there are that many seconds in a day. See \*(L"How Date Math is Done\*(R" in DateTime for more details.
.ie n .IP "from ""HashRef""" 4
.el .IP "from \f(CWHashRef\fR" 4
.IX Item "from HashRef"
Calls \*(L"new\*(R" in DateTime::Duration with the hash entries as arguments.
.RE
.RS 4
.RE
.IP "DateTime::Locale" 4
.IX Item "DateTime::Locale"
A class type for DateTime::Locale::root with the name DateTime::Locale.
.RS 4
.ie n .IP "from ""Str""" 4
.el .IP "from \f(CWStr\fR" 4
.IX Item "from Str"
The string is treated as a language tag (e.g. \f(CW\*(C`en\*(C'\fR or \f(CW\*(C`he_IL\*(C'\fR) and given to \*(L"load\*(R" in DateTime::Locale.
.IP "from Locale::Maktext" 4
.IX Item "from Locale::Maktext"
The \f(CW\*(C`Locale::Maketext/language_tag\*(C'\fR attribute will be used with \*(L"load\*(R" in DateTime::Locale.
.RE
.RS 4
.RE
.IP "DateTime::TimeZone" 4
.IX Item "DateTime::TimeZone"
A class type for DateTime::TimeZone, this now as of 0.05 coerces from non-globally ambigious Olson abbreviations, using Olson::Abbreviations. This won't work for abbreviations like \*(L"\s-1EST\*(R"\s0 which are only unambigious if you know the locale. It will coerce from abbreviations like \*(L"\s-1CEST\*(R"\s0 though.
.RS 4
.ie n .IP "from ""Str""" 4
.el .IP "from \f(CWStr\fR" 4
.IX Item "from Str"
Treated as a time zone name or offset. See \*(L"\s-1USAGE\*(R"\s0 in DateTime::TimeZone for more details on the allowed values.
.Sp
Delegates to \*(L"new\*(R" in DateTime::TimeZone with the string as the \f(CW\*(C`name\*(C'\fR argument.
.RE
.RS 4
.RE
.SH "SEE ALSO"
.IX Header "SEE ALSO"
MooseX::Types::DateTimeX
.PP
DateTime
.SH "AUTHOR"
.IX Header "AUTHOR"
.SS "Modern"
.IX Subsection "Modern"
Evan Carroll <me+cpan@evancarroll.com>
.SS "Yesteryear"
.IX Subsection "Yesteryear"
Yuval Kogman <nothingmuch@woobling.org>
.PP
John Napiorkowski <jjn1056 at yahoo.com>
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module packages several Moose::Util::TypeConstraints with coercions, designed to work with the DateTime suite of objects.
.PP
This module started as a fork of MooseX::Types::DateTime. This history and explaination is as follows:
In Janurary 2009, I began a project to bring DateTime::Format::* stuff up to date with Moose. I created a framework that would greatly eliminate redundant code named DateTimeX::Format. This project's adoption was slowed by then (and still currently) bundeled \fBpackage\fR MooseX::Types::DateTime. MooseX::Types::DateTime was a badly packaged extention of two modules the self-titled MooseX::Types::DateTime, and another random module MooseX::Types::DateTimeX. In Februrary of the same year, I repackaged the module MooseX::Types::DateTimeX with the authors blessing into a new package, for the purpose of removing its dependenices, namely Date::Manip, from MooseX::Types::DateTime.
.PP
Unfortunately, this just added confusion. Now, as of the time of writing MooseX::Types::DateTimeX is available as a package, and it is available as a module which will be installed by MooseX::Types::DateTime. The benefit of removing the dependency on MooseX::Types::DateTime was never realized and the patch that updates the dependencies, and the build system remains in rt still as of writing.
.PP
This module is just the MooseX::Types::DateTime without the requirement on DateTimeX::Easy (which requires DateTime::Manip). As of 0.05 this module supports globally unique Olson abbreviations, and dies when they are not globally unique.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
.Vb 3
\&        Copyright (c) 2008 Yuval Kogman. All rights reserved
\&        This program is free software; you can redistribute
\&        it and/or modify it under the same terms as Perl itself.
\&
\&        Modifications (c) 2009 Evan Carroll. All rights reserved
\&        This program is free software; you can redistribute
\&        it and/or modify it under the same terms as Perl itself.
.Ve
