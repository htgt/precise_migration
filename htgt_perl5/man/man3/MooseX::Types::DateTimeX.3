.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MooseX::Types::DateTimeX 3"
.TH MooseX::Types::DateTimeX 3 "2010-09-21" "perl v5.14.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MooseX::Types::DateTimeX \- Extensions to MooseX::Types::DateTime::ButMaintained
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    package MyApp::MyClass;
\&
\&    use MooseX::Types::DateTimeX qw( DateTime );
\&
\&    has created => (
\&        isa => DateTime,
\&        is => "rw",
\&        coerce => 1,
\&    );
\&
\&    my $instance = MyApp::MyClass\->new(created=>\*(AqJanuary 1, 1980\*(Aq);
\&    print $instance\->created\->year; # is 1980
\&
\&    ## Coercions from the base type continue to work as normal.
\&    my $instance = MyApp::MyClass\->new(created=>{year=>2000,month=>1,day=>10});
.Ve
.PP
Please see the test case for more example usage.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module builds on MooseX::Types::DateTime to add additional custom types and coercions.  Since it builds on an existing type, all coercions and constraints are inherited.
.PP
The package name is left as is for legacy reasons: this module is really a Type with coercions for DateTimeX::Easy. DateTimeX is just a namespace for non-core or less-official DateTime modules.
.SH "SUBTYPES"
.IX Header "SUBTYPES"
This module defines the following additional subtypes.
.SS "DateTime"
.IX Subsection "DateTime"
Subtype of 'DateTime'.  Adds an additional coercion from strings.
.PP
Uses DateTimeX::Easy to try and convert strings, like \*(L"yesterday\*(R" into a valid DateTime object.  Please note that due to ambiguity with how different systems might localize their timezone, string parsing may not always return the most expected value.  \s-1IN\s0 general we try to localize to \s-1UTC\s0 whenever possible.  Feedback welcomed!
.SS "Duration"
.IX Subsection "Duration"
Subtype of 'DateTime::Duration' that coerces from a string.  We use the module Time::Duration::Parse to attempt this.
.SH "CAVEATS"
.IX Header "CAVEATS"
Firstly, this module uses DateTimeX::Easy which is way to more \s-1DWIM\s0 than any sane person would desire. DateTimeX::Easy works by falling back until something makes sense, this is variable. Furthermore, all the modules that DateTimeX::Easy *can* use aren't required for \*(L"proper\*(R" function of DateTimeX::Easy. What does this mean? Simple, your mileage may vary in your coercions because DateTimeX::Easy is installation specific.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
MooseX::Types::DateTime::ButMaintained Replacement for this module \*(-- coercions with less voodoo
.IP "\(bu" 4
DateTimeX::Easy Backend of this module
.SH "AUTHOR"
.IX Header "AUTHOR"
John Napiorkowski <jjn1056 at yahoo.com>
.PP
Broken into a seperate package from MooseX::Types::DateTime by Evan Carroll.
.SH "LICENSE"
.IX Header "LICENSE"
.Vb 1
\&    Copyright (c) 2008 John Napiorkowski.
\&
\&    This program is free software; you can redistribute
\&    it and/or modify it under the same terms as Perl itself.
.Ve
