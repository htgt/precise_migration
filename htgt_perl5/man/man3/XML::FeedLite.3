.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "XML::FeedLite 3"
.TH XML::FeedLite 3 "2013-08-13" "perl v5.14.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
XML::FeedLite \- Perl extension for fetching Atom and RSS feeds with minimal outlay
.SH "VERSION"
.IX Header "VERSION"
\&\f(CW$Revision:\fR 1.9 $
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use XML::FeedLite;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module fetches and processes Atom and RSS-format \s-1XML\s0 feeds. It's
designed as an alternative to XML::Atom, specifically to work better
under mod_perl. This module requires LWP::Parallel::UserAgent.
.SH "SUBROUTINES/METHODS"
.IX Header "SUBROUTINES/METHODS"
.SS "new \- Constructor"
.IX Subsection "new - Constructor"
.Vb 1
\&  my $xfl = XML::FeedLite\->new(\*(Aqhttp://www.atomenabled.org/atom.xml\*(Aq);
\&
\&  my $xfl = XML::FeedLite\->new([qw(http://www.atomenabled.org/atom.xml
\&                                   http://slashdot.org/slashdot.rss)]);
\&
\&  my $xfl = XML::FeedLite\->new({
\&                                timeout    => 60,
\&                                url        => \*(Aqhttp://www.atomenabled.org/atom.xml\*(Aq,
\&                                http_proxy => \*(Aqhttp://user:pass@webcache.local.com:3128/\*(Aq,
\&                               });
\&
\& Options can be: url        (optional scalar or array ref, URLs of feeds)
\&                 timeout    (optional int,      HTTP fetch timeout in seconds)
\&                 http_proxy (optional scalar,   web cache or proxy if not set in %ENV)
\&                 proxy_user (optional scalar,   username for authenticating forward\-proxy)
\&                 proxy_pass (optional scalar,   password for authenticating forward\-proxy)
\&                 user_agent (optional scalar,   User\-Agent HTTP request header value)
\&
\&
\&  Very often you\*(Aqll want to use XML:::FeedLite::Normalised instead of this baseclass.
.Ve
.SS "http_proxy \- Get/Set http_proxy"
.IX Subsection "http_proxy - Get/Set http_proxy"
.Vb 1
\&    $xfl\->http_proxy("http://user:pass@squid.myco.com:3128/");
.Ve
.SS "proxy_user \- Get/Set proxy username for authenticating forward-proxies"
.IX Subsection "proxy_user - Get/Set proxy username for authenticating forward-proxies"
.Vb 1
\&  This is only required if the username wasn\*(Aqt specified when setting http_proxy
\&
\&    $xfl\->proxy_user(\*(Aqmyusername\*(Aq);
.Ve
.SS "proxy_pass \- Get/Set proxy password for authenticating forward-proxies"
.IX Subsection "proxy_pass - Get/Set proxy password for authenticating forward-proxies"
.Vb 1
\&  This is only required if the password wasn\*(Aqt specified when setting http_proxy
\&
\&    $xfl\->proxy_pass(\*(Aqsecretpassword\*(Aq);
.Ve
.SS "user_agent \- Get/Set user-agent for request headers"
.IX Subsection "user_agent - Get/Set user-agent for request headers"
.Vb 1
\&    $xfl\->user_agent(\*(AqFeedtastic/1.0\*(Aq);
.Ve
.SS "timeout \- Get/Set timeout"
.IX Subsection "timeout - Get/Set timeout"
.Vb 1
\&    $xfl\->timeout(30);
.Ve
.SS "url \- Get/Set \s-1DSN\s0"
.IX Subsection "url - Get/Set DSN"
.Vb 1
\&  $xfl\->url(\*(Aqhttp://das.ensembl.org/das/ensembl1834/\*(Aq); # give url (scalar or arrayref) here if not specified in new()
\&
\&  Or, if you want to add to the existing url list and you\*(Aqre feeling sneaky...
\&
\&  push @{$xfl\->url}, \*(Aqhttp://my.server/das/additionalsource\*(Aq;
.Ve
.SS "reset \- Flush bufers, reset flags etc."
.IX Subsection "reset - Flush bufers, reset flags etc."
.Vb 1
\&  $xfl\->reset();
.Ve
.SS "entries \- Retrieve XML::Simple data structures from feeds"
.IX Subsection "entries - Retrieve XML::Simple data structures from feeds"
.Vb 1
\&  my $entry_data = $xfl\->entries();
.Ve
.SS "meta \- Meta data globally keyed on feed, or for a given feed"
.IX Subsection "meta - Meta data globally keyed on feed, or for a given feed"
.Vb 2
\&  my $hrMeta     = $xfl\->meta();
\&  my $hrFeedMeta = $xfl\->meta(\*(Aqhttp://mysite.com/feed.xml\*(Aq);
.Ve
.SS "title \- The name/title of a given feed"
.IX Subsection "title - The name/title of a given feed"
.Vb 1
\&  my $title = $xfl\->title($feed);
.Ve
.SS "fetch \- Performs the \s-1HTTP\s0 fetch and processing"
.IX Subsection "fetch - Performs the HTTP fetch and processing"
.Vb 10
\&  $xfl\->fetch({
\&               #########
\&               # URLs and associated callbacks
\&               #
\&               \*(Aqurl1\*(Aq => sub { ... },
\&               \*(Aqurl2\*(Aq => sub { ... },
\&              },
\&              {
\&               #########
\&               # Optional HTTP headers
\&               #
\&               \*(AqX\-Forwarded\-For\*(Aq => \*(Aqa.b.c.d\*(Aq,
\&              });
.Ve
.SS "statuscodes \- Retrieve \s-1HTTP\s0 status codes for request URLs"
.IX Subsection "statuscodes - Retrieve HTTP status codes for request URLs"
.Vb 2
\&  my $code         = $xfl\->statuscodes($url);
\&  my $code_hashref = $xfl\->statuscodes();
.Ve
.SS "max_req \- set number of running concurrent requests"
.IX Subsection "max_req - set number of running concurrent requests"
.Vb 2
\&  $xfl\->max_req(5);
\&  print $xfl\->max_req();
.Ve
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.SH "CONFIGURATION AND ENVIRONMENT"
.IX Header "CONFIGURATION AND ENVIRONMENT"
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
.IP "strict" 4
.IX Item "strict"
.PD 0
.IP "warnings" 4
.IX Item "warnings"
.IP "WWW::Curl::Simple" 4
.IX Item "WWW::Curl::Simple"
.IP "HTTP::Request" 4
.IX Item "HTTP::Request"
.IP "HTTP::Headers" 4
.IX Item "HTTP::Headers"
.IP "HTML::Entities" 4
.IX Item "HTML::Entities"
.IP "MIME::Base64" 4
.IX Item "MIME::Base64"
.IP "English" 4
.IX Item "English"
.IP "Carp" 4
.IX Item "Carp"
.IP "Readonly" 4
.IX Item "Readonly"
.PD
.SH "INCOMPATIBILITIES"
.IX Header "INCOMPATIBILITIES"
.SH "BUGS AND LIMITATIONS"
.IX Header "BUGS AND LIMITATIONS"
.SH "AUTHOR"
.IX Header "AUTHOR"
Roger Pettett, <rmp@psyphi.net>
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright (C) 2010 by Roger Pettett
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.8.4 or,
at your option, any later version of Perl 5 you may have available.
